If we can make a groups satisfying the condition, we can certainly make x - 1 groups. This allows us to use binary search to find the largest valid x.
Now, our task switches to the following:
Given æ, is it possible to make exactly x groups of candies satisfying the given conditions?
To answer this, let's look at each of the types of candies.
For the i-th type, we have A; of them. However, we're trying to make a groups, and each group can contain at most one of this type.
So, we can only really use min(x, A;) candies of type i.
N Σ1 This means the total number of candies usable by us is S₁ = min(x, A¿).
Now, since each group should have size K, that means we need · K candies in total. . So, if Sex K, then surely making a groups is impossible.
On the other hand, if S > x. K, it's not very hard to see that making a groups is possible (since we have at most x of each type now).
This gives us a check in O(N) for the binary search: compute S₂ = min(x, A;), and compare it against . K. N


// CODE



#include <bits/stdc++.h>
#define int long long 

using namespace std;

bool check(int grp,vector<int>&v,int k){
    
    int cand=0;
    for(int i=0;i<v.size();i++){
        cand+=min(grp,v[i]);
    }
    
    int need=grp*k;
    
    if(need<=cand) return true;
    
    return false;
}

signed main()
{
    int t;
    cin>>t;
    
    int a=1;
    
    while(a<=t){
        
        
        int n,k;
        cin>>n>>k;
        
        vector<int>v(n);
        
        for(int i=0;i<n;i++){
            cin>>v[i];
        }
        
        int right=accumulate(v.begin(),v.end(),0ll);
        int left=1;
        int ans=0;
        
        while(left<=right){
            
            int mid=left+(right-left)/2;
            
            if(check(mid,v,k)){
                ans=mid;
                left=mid+1;
            }else{
                right=mid-1;
            }
        }
        
         cout<<ans;
         
         cout<<endl;
         a++;
    }
    
    return 0;
}
